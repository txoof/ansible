---
- name:  config
  hosts: "{{ host | default('none') }}"
  gather_facts: yes
  vars:
    spocon_config: "/opt/spocon/config.toml"

  tasks:
    - name: gather installed debian packages
      package_facts:
        manager: "auto"

    - name: install and configure squeezelite
      block:

      - name: install necessary packages
        apt:
          pkg:
          - curl
          - apt-transport-https
          - squeezelite
          state: latest
        become: true
        when: "'squeezelite' not in ansible_facts.packages"

      - name: set sound output device
        lineinfile:
          path: /etc/default/squeezelite
          regexp: '^SL_SOUNDCARD="\w+"'
          line: 'SL_SOUNDCARD="sysdefault:CARD=sndrpihifiberry"'
          state: present
          backup: yes
        become: true
        register: match
        notify: restart_squeezelite

      - name: set squeezelite timeout for soundcard release
        lineinfile:
          path: /etc/default/squeezelite
          regexp: '^SB_EXTRA_ARGS="-C \d+"'
          line: 'SB_EXTRA_ARGS="-C 10"'
          state: present
          backup: yes
        become: true
        register: match
        notify: restart_squeezelite

    - name: install spocon
      block:
        - name: get spocon installer script
          get_url:
            url: https://spocon.github.io/spocon/install.sh 
            dest: /tmp/spocon-installer.sh
            mode: 0755

        - name: execute spocon installer script
          shell: /tmp/spocon-installer.sh

        - name: cleanup spocon script
          file:
            path: /tmp/spocon-installer.sh
            state: absent
      become: true
      when: "'spocon' not in ansible_facts.packages"

    - name: configure spocon for paperpi
      block:

        - name: prompt spocon name
          pause:
            prompt: 'what name should be used for this spocon instance? Suggested: Spotify-{{ansible_hostname}}'
          register: spocon_name
          until:
            - spocon_name.user_input|length > 0
          retries: 4
          delay: 1

        - name: set spocon log level to WARN
          ansible.builtin.lineinfile:
            backup: yes
            backrefs: yes
            state: present
            path: "{{spocon_config}}"
            regexp: '^logLevel.*'
            line: 'logLevel = "WARN"'
          notify: restart_spocon

        - name: set initial volume to 1/4 of max (65536)
          ansible.builtin.lineinfile:
            backup: yes
            backrefs: yes
            state: present
            path: "{{spocon_config}}"
            regexp: '^(\s+)?initialVolume.*'
            line: '\1initialVolume = 8192'
          notify: restart_spocon

        - name: set player name
          ansible.builtin.lineinfile:
            backup: yes
            backrefs: yes
            state: present
            path: "{{spocon_config}}"
            regexp: '^(\s+)?deviceName.*'
            line: '\1deviceName = "{{ spocon_name.user_input}}"'
          notify: restart_spocon

        - name: set device type to Speaker
          ansible.builtin.lineinfile:
            backup: yes
            backrefs: yes
            state: present
            path: "{{spocon_config}}"
            regexp: '^(\s+)?deviceType.*'
            line: '\1deviceType = "SPEAKER"'
          notify: restart_spocon        

        - name: set volume steps to 25
          ansible.builtin.lineinfile:
            backup: yes
            backrefs: yes
            state: present
            path: "{{spocon_config}}"
            regexp: '^(\s+)?volumeSteps.*'
            line: '\1volumeSteps = 25'
          notify: restart_spocon
        
        - name: set player.preferredAudioQuality
          ansible.builtin.lineinfile:
            backup: yes
            backrefs: yes
            state: present
            path: "{{spocon_config}}"
            regexp: '^(\s+)preferredAudioQuality\s+=\s+"\w+"'
            line: '\1preferredAudioQuality = "VERY_HIGH"'
          notify: restart_spocon


      become: true

    - name: Update spocon binary if needed
      block:
        - name: Query GitHub API
          uri:
            url: "https://api.github.com/repos/librespot-org/librespot-java/releases/latest"
            method: GET
            return_content: yes
            timeout: 30
          register: github_api_result

        - name: Set json_return variable
          set_fact:
            json_return: "{{ github_api_result.content | from_json }}"

        - name: Parse JSON and get latest tag version
          set_fact:
            latest_tag: "{{ json_return.tag_name | regex_replace('[^0-9.]', '' )}}"

        - name: Set search name
          set_fact:
            remote_filename: "librespot-api-{{latest_tag}}.jar"

        - name: Parse JSON and extract browser_download_url for {{ remote_filename }}
          set_fact:
            download_urls: "{{ json_return | json_query(query) }}"
          vars:
            query: "assets[?contains(name, '{{remote_filename}}' )].browser_download_url"

        - name: Display extracted download URLs
          debug:
            var: download_urls[0]

        - name: Set service file path
          set_fact:
            spocon_service_file: "/lib/systemd/system/spocon.service"

        - name: Read file contents
          slurp:
            path: "{{ spocon_service_file }}"
          register: spoconservice_contents

        - name: Gather installed release version number
          set_fact:
            installed_version: "{{ spoconservice_contents.content | b64decode | regex_search('^ExecStart=.*librespot-.*api-[a-zA-Z]*([0-9.]+)\\.jar', multiline=True) | regex_replace('^ExecStart=.*librespot-.*api-[a-zA-Z]*([0-9.]+)\\.jar', '\\1') }}"

        - name: Display Installed Version
          debug:
            msg: "Installed version: {{ installed_version }} :: Latest version {{ latest_tag }}"

        - name: Compare Versions
          set_fact:
            versions_equal: "{{ true if latest_tag == installed_version else false }}"

        - meta: end_play
          when: versions_equal

        - name: Gather spocon working path
          set_fact:
            spocon_path: "{{ spoconservice_contents.content | b64decode | regex_search('^WorkingDirectory=(.*)$', multiline=True) | regex_replace('^.*=', '') }}"

        - name: Create temp directory for downloads
          when: not versions_equal|bool
          tempfile:
            state: directory
          register: temp_dir

        - name: "Download latest release: {{remote_filename}}"
          when: not versions_equal|bool
          get_url:
            url: "{{ download_urls[0] }}"
            dest: "{{temp_dir.path}}/{{remote_filename}}"

        - name: Update .jar file to downloaded version - {{latest_tag}}
          when: not versions_equal|bool
          copy:
            src: "{{temp_dir.path}}/{{remote_filename}}"
            dest: "{{spocon_path}}"
            remote_src: true
          become: true
      
        - name: Stop spocon
          when: not versions_equal|bool
          systemd:
            state: stopped
            name: spocon
          become: true

        - name: Update executable in service file
          when: not versions_equal|bool 
          replace:
            path: "{{ spocon_service_file }}"
            regexp: >-
              ^(ExecStart=.*)librespot-java-api.*$
            replace: >-
              \1{{ remote_filename }}
          become: true

        - name: Reload spocon unit file
          when: not versions_equal|bool
          systemd:
            state: restarted
            daemon_reload: True
            name: spocon
          become: true
          

        - name: Cleanup temp files
          when: not versions_equal|bool
          file:
            path: "{{ temp_dir.path }}"
            state: absent


  handlers:
    - name: restart_squeezelite
      become: true
      service:
        name: squeezelite
        state: restarted

    - name: restart_spocon
      become: true
      service:
        name: spocon
        state: restarted  

